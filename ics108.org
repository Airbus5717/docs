#+TITLE: ICS108 NOTES
#+DESCRIPTION: Notes for Java OOP Ics108 course
#+AUTHOR: Airbus5717
#+begin_comment
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup
#+end_comment
#+HTML_HEAD: <link href="extra.css" rel="stylesheet" type="text/css" />
#+LaTeX_HEADER: \usepackage{minted}


#+begin_quote
THIS IS NOT AN ALTERNATIVE TO THE BOOK
#+end_quote

-----
* Chapter 1: Introduction to Java
** Simple Java Program
 
#+NAME: Java simple Program
#+begin_src java
class App {
    public static void main(String[] args) {
        System.out.println("Welcome to Java!");
    }
}
#+end_src

#+RESULTS: Java simple Program

#+begin_quote
Java source files are compiled by Java compiler to bytecode (.class files) then
ran with Java Virtual Machine (JVM)
#+end_quote

+ Class name = App
+ Main method = public static void main (arguments)

  { code in method }
+ Statements = i.e. print statement
  - each statment in java must end with a semicolon (;)
+ Reserved keywords
    - class
    - public
    - static
    - void
    - etc.
+ Comments
  - single line and multiline comments
    #+begin_src java
    // single line comment
    /* multi line
     comment */

    #+end_src
+ Blocks: a group of components of a program
-----
** Programming Style and documentation
+ Appropriate Comments
+ Naming Conventions
+ Proper Identation and spacing lines
+ Block styles
** Programming Errors
+ Syntax Errors
  + Detected by the compiler (i.e. missing semicolon)
+ Runtime Errors
  + Causes the program to abort (i.e. divition by zero)
+ Logic Errors
  + Produces incorrect results (i.e. incorrect logic)
-----
* Chapter 2: Elementry Programming
** Program example:
#+NAME: Compute Circle Area
#+begin_src java
public class App {
    public static void main(String[] args) {
        double radius;
        double area;

        // assign a radius
        radius = 20;

        // Compute Area
        area = Math.pow(radius, 2) * Math.PI;
        // NOTE: Math pow function returns a double

        // Display result
        System.out.println("The Area: " + area + " for radius: " + radius);
    }
}
#+end_src
-----
** Reading Input
Reading Input can be done by creating a Scanner Object
which can be imported from `java.util.Scanner;`
#+NAME: Input Scanner example
#+begin_src java

// import module.class
import java.util.Scanner;

class App {
    public static void main(String[] args ) {
        Scanner input = new Scanner(System.in);
        System.out.print("Enter a double value: ");
        double d = input.nextDouble();

        // to get int: use 'input.nextInt();'
        // float: use input.nextFloat();
        // for String: use input.next(); or input.nextLine();
        // for Char use String input then
        // get the first char (code below)
        // String.s = input.nextLine();
        // char ch = s.charAt(0);

        input.close();
        /*
          good practice is to
          close scanners and files
           ,*/
        // Display output
        System.out.println("the double value is " + d);
    }
}
#+end_src
-----
** Imports
+ Implicit import =import java.util.*;=
+ Explicit import =import java.util.Scanner;=
No Performance difference
-----

** Identifiers
+ sequence of chars are from letters, digits, underscores(_) and dollar signs($).
+ An identifier must start with a letter, an underscore or a dollar sign,
  #+begin_center
  IT CANNOT START WITH A DIGIT.
  #+end_center
+ An identifier cannot be a reserved word or default types such as (true, false etc.).
+ An identifier can be of any length.
-----
** Variables
*** declare variables
  #+begin_src java
  int x = 1; // variable example

  // other variables
  double y = 12.0;
  char b = 's';
  String u = "Bruh";

  #+end_src
  
  'int' is a type,

  'x' is an identifier,

  '1' is an int value,

  ';' is for statement termination,

  '=' is for assignment
-----
*** Constant variables

  #+begin_src java
  final int SIZE = 3;
  // final keyword is written before datatype
  // to indicate that the variable is immutable
  #+end_src

-----
** Naming Conventions
choose meaningful names
*** Variable and method names
use lowercase and capitalize each word after the first word

#+begin_src java
int computeArea(int area, int radius) {
    int computedResult = area * radius; // example
    return computedResult;
}
#+end_src
-----
*** Class names
Capitalize first letter of each word in the name
for example
#+begin_src java
class ComputeArea {  }
#+end_src
-----
*** Constant names
Capitalize all letters

for example
#+begin_src java
final int MAX_VALUE = 100;
#+end_src

-----
** Operators
    + (+) add
    + (-) substract
    + (*) multiply
    + (/) divide
    + (%) remainder i.e. 5 % 2 == 1
-----
*** useful operations
#+begin_src java
i = i + 1; 
i += 1;
i++;
++i;
 // these 4 statements are the same

++i; // adds then uses the value
i++; // uses the value then adds
--i;
i--;
// but if it is a statement by it self then
// it wouldn't matter much

// other operators's support
i += 1; i -= 1; i *= 1; i /= 1; i %= 1; 

#+end_src
-----
** Data types
*** Integers
are numbers without decimal values and range between
-2^31 to (2^31) - 1

example:
#+begin_src java
final int MAX_INT =  2147483647;
final int MIN_INT = -2147483648;

// example
int x = 100;
#+end_src
*** Floats and Double
are numbers with decimal points
by default Java will make any decimal point double unless added an F after it i.e.
letter D can be used for classifing as double.

#+begin_src java
float x = 10.0f; // f is written to indicate that the variable is float
double y = 10.0;
// also correct
double y2 = 10.0d;
#+end_src

#+begin_quote
NOTE: floating points are not accurate always during calculations and it is recommeneded to use double for more accuracy
#+end_quote

-----
*** Scientific Notation
Floating point literals can be specified in scientific notations using (e, E).

#+begin_quote
: NOTE: use double for more accuracy
#+end_quote

for example
#+begin_src java
double sciX = 10.2e20;
#+end_src

-----
*** Chars and Strings
are used to store text, char are for one character and strings are used for multiple characters

#+begin_src java
char b = 'a';
String str = "bruh why String is capital";
// NOTE: String data type first letter is capital
#+end_src

#+RESULTS:

-----
*** other types

+ byte: similar to int but smaller range (-128 to 127)
+ long: similar to int but bigger range
  (-2^63 to (2^63) - 1)

-----
*** Display Current Time in GMT
#+begin_src java
long time = System.currentTimeMillis();
// == current GMT time in milliseconds
#+end_src

-----
*** Conversion rules
1. if one of the operands is double then final value is Double
1. otherwise if one is float then the final value is float.
1. otherwise, if one of the operands is long then both are long.
1. finally they are int if one of them is int

-----
*** Type casting
+ implicit casting i.e.
  #+begin_src java
  double d = 3; // (type widening)
  #+end_src
+ Explicit casting i.e.
  #+begin_src java
  int i = (int) 3.0; // (type narrowing)
  int j = (int) 3.9; // (fraction part is truncated)
  // i = 3; j = 3;
  #+end_src

another example
#+begin_src java
int sum = 0;
sum += 4.5; // now sum is 4
#+end_src

-----
** Common Errors and pitfalls
**** Common Errors
1. Undeclared Variables and unused variables
   i.e. using Variables that do not exist.

1. Interger overflow
   using numbers over the max/min range

1. Round-off Errors
   when dealing with alot of float numbers

1. Unintended Integer division
    i.e. division over zero

1. Redundant Input objects
    i.e. getting wrong input
    for example: getting a string instead of an int.
-----
* Chapter 3: Selections
** More Data types
*** boolean type
bool values are true or false
#+begin_src java
boolean type = true;
type = false; // changed to false
#+end_src

*** boolean (comparasion operators)
=>=, =<=, =<==, =>==, etc.
i.e.
#+begin_src java
boolean x = 3 > 2; // true
boolean y = 4 < 3; // false

#+end_src
-----
** If else statements
*** if
checks for true boolean then excutes code in the block
*** else
if the 'if' condition is false then else block executes

#+begin_src java

int x = 1;

if (x > 0) {
    // if x is positive then this code block executes
    // NOTE: in this example the code here executes.
} else {
    // if x is negative the code here executes.
}


// also this is possible

if (x > 0) {
    // if x is positive
} else if (x < 0) {
    // if x is negative
} else {
    // if x is not positive nor negative
}

// the code will check at each statement
// also adding a semicolon at if or else is an error
// and it is a logic error
#+end_src

-----
** Logical operators

| operator     | name         | description         |
|--------------+--------------+---------------------|
| =!=          | not          | logical negation    |
| =&&=         | and          | logical conjunction |
| =^=          | exclusive or | logical exclusive   |
| =\vert\vert= | or           | logical disjunction |
|--------------+--------------+---------------------|

 examples:
#+begin_src java
int x = 1;
if (x != 1) {
    // wont execute
}

int y = 0;
if (x == 1 && y == 0) {
    // will execute
}


// '^' operator
// if both are true or false then it will evaluate as
// false otherwise if one is false and the other isnt
// it will evaluate as true

//   false    true
if (x != 1 ^ y == 0) {
    // will execute
}

bool a = false;

if (!a)
    // will be true and execute

bool b = true;

if ( a || b ) {
    // will execute (true)
}

#+end_src

-----
Leap year example

#+begin_src java
int year = 2021; // use input or get the year number

if ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)) {
    System.out.println("Year is leap");
}
#+end_src
-----
** Switch statement
alternative to if statements equating with specific value.

#+begin_src java

int x = 1;

switch (x) {
    case 1:
        // code if x == 1
        break;
    case 2:
        // code if x == 2
        break;
    default:
        // insert if value doesnt match the cases
        break;
}

#+end_src
-----
** Conditional operators: Ternary
(boolean) ? (if boolean is true) : (if boolean is false);
#+begin_src java
boolean x = true;

int b = x ? 1 : 0; // now b is 1 cuz x is true

int c = !x ? 1 : 0; // c is 0

#+end_src
-----

** Operator order (precedence)
1. =var++=, =var--=
2. =+=, =-=, and =++var=, =--var=.
3. =(type)= cast
4. =!= (Not)
5. =*=, =/=, =%=
6. =+=, =-=
7. =<=, =<==, =>=, =>==
8. ==== , =!==
9. =^= (Exclusive or)
10. =&&=
11. =||=
12. ====, =+==, =-==, =*==, =/==, =%==
-----

** Debugging

#+begin_center
=NOTE: use a debugger when facing problems=
#+end_center

-----

* Chapter 4: Math functions, Chars and Strings
** Math Class
*** Constants
+ =PI=

+ =E=
-----

*** Methods
**** Trigonometric Methods
return double always
+ =sin(double a);=

+ =cos(double a);=

+ =tan(double a);=

+ =acos(double a);=

+ =asin(double a);=

+ =atan(double a);=

+ =toRadians(double a);= // converts to radians

+ =toDegrees(double a);=

-----
**** Rounding Methods
+ =ceil(double x)=
  x is rounded up to nearest int then returned as double

+ =floor(double x)=
  x is rounded down to nearest int then returned as double

+ =rint(double x)=
  x is returned to the nearest int, if x is equally close to both then the even one is returned as double

+ =round(float x)=
  returns (int)Math.floor(x + 0.5);

+ =round(double x)=
  returns (long)Math.floor(x + 0.5);
#+begin_center
NOTE: check examples in slides for Chapter4 page:(8)
#+end_center
-----
**** Exponent Methods
***** TODO Methods

-----
**** min, max, abs, and Random Methods
+ =max(a, b)= and =min(a, b)=
  return max or min of the 2 arguments
+ =abs(a)= returns the absolute value
+ =random()= returns a random double (from 0.0 to 1.0)
-----
** Characters
*** Special Chars
+ =\b= Backspace
+ =\t= Tab
+ =\n= linefeed
+ =\f= formfeed
+ =\r= carriage return
+ =\\= Backslash = \
+ ="= or =\"= Double Quote
-----
*** Casting between char and ints
#+begin_src java
int i = 'a'; // same as int i = (int)'a';

char a = 97; // same as char c = (char)97;

char ch = 'a';// choose any value

if (ch >= 'A' && ch <= 'Z')
    // uppercase
else if (ch >= 'a' && ch <= 'z')
    // lowercase
else if (ch >= '0' && ch <= '9')
    // number character
#+end_src
-----
*** Character Methods
+ =isLetter()=
+ =isDigit()=
+ =isWhitespace()=
+ =isUpperCase()=
+ =isLowerCase()=
+ =toUpperCase()=
+ =toLowerCase()=
+ =toString()=
-----
** Strings
*** String Length
#+begin_src java
String message = "welcome to java";
int length = message.length(); // String length
#+end_src
Strings are arrays of characters that start at 0
-----
*** specific char from string
#+begin_src java
message.charAt(0); // is 'W'
#+end_src
-----
*** Converting strings
#+begin_src java
"Welcome".toLowerCase(); // returns "welcome"
"Welcome".toUpperCase(); // returns "WELCOME"
"Welcome  ".trim(); // returns "Welcome"
#+end_src
-----
*** String concatenation
#+begin_src java
String s3 = s1.concat(s2);
// or
String s4 = s1 + s2;
// s3 and s4 are string values are equal
boolean bruh = s3.equals(s4); // returns true
#+end_src
-----
*** String Methods list
| Method                  | Description                                                                                                                   | return type  |
|-------------------------+-------------------------------------------------------------------------------------------------------------------------------+--------------|
| =charAt()=              | Returns the character at the specified index (position)                                                                       | char         |
| =codePointAt()=         | Returns the Unicode of the character at the specified index                                                                   | int          |
| =codePointBefore()=     | Returns the Unicode of the character before the specified index                                                               | int          |
| =codePointCount()=      | Returns the Unicode in the specified text range of this String                                                                | int          |
| =compareTo()=           | Compares two strings lexicographically                                                                                        | int          |
| =compareToIgnoreCase()= | Compares two strings lexicographically, ignoring case differences                                                             | int          |
| =concat()=              | Appends a string to the end of another string                                                                                 | String       |
| =contains()=            | Checks whether a string contains a sequence of characters                                                                     | boolean      |
| =contentEquals()=       | Checks whether a string contains the exact same sequence of characters of the specified CharSequence or StringBuffer          | boolean      |
| =copyValueOf()=         | Returns a String that represents the characters of the character array                                                        | String       |
| =endsWith()=            | Checks whether a string ends with the specified character(s)                                                                  | boolean      |
| =equals()=              | Compares two strings. Returns true if the strings are equal, and false if not                                                 | boolean      |
| =equalsIgnoreCase()=    | Compares two strings, ignoring case considerations                                                                            | boolean      |
| =format()=              | Returns a formatted string using the specified locale, format string, and arguments                                           | String       |
| =getBytes()=            | Encodes this String into a sequence of bytes using the named charset, storing the result into a new byte array                | byte[]       |
| =getChars()=            | Copies characters from a string to an array of chars                                                                          | void         |
| =hashCode()=            | Returns the hash code of a string                                                                                             | int          |
| =indexOf()=             | Returns the position of the first found occurrence of specified characters in a string                                        | int          |
| =intern()=              | Returns the canonical representation for the string object                                                                    | String       |
| =isEmpty()=             | Checks whether a string is empty or not                                                                                       | boolean      |
| =lastIndexOf()=         | Returns the position of the last found occurrence of specified characters in a string                                         | int          |
| =length()=              | Returns the length of a specified string                                                                                      | int          |
| =matches()=             | Searches a string for a match against a regular expression, and returns the matches                                           | boolean      |
| =offsetByCodePoints()=  | Returns the index within this String that is offset from the given index by codePointOffset code points                       | int          |
| =regionMatches()=       | Tests if two string regions are equal                                                                                         | boolean      |
| =replace()=             | Searches a string for a specified value, and returns a new string where the specified values are replaced                     | String       |
| =replaceFirst()=        | Replaces the first occurrence of a substring that matches the given regular expression with the given replacement             | String       |
| =replaceAll()=          | Replaces each substring of this string that matches the given regular expression with the given replacement                   | String       |
| =split()=               | Splits a string into an array of substrings                                                                                   | String[]     |
| =startsWith()=          | Checks whether a string starts with specified characters                                                                      | boolean      |
| =subSequence()=         | Returns a new character sequence that is a subsequence of this sequence                                                       | CharSequence |
| =substring()=           | Extracts the characters from a string, beginning at a specified start position, and through the specified number of character | String       |
| =toCharArray()=         | Converts this string to a new character array                                                                                 | char[]       |
| =toLowerCase()=         | Converts a string to lower case letters                                                                                       | String       |
| =toString()=            | Returns the value of a String object                                                                                          | String       |
| =toUpperCase()=         | Converts a string to upper case letters                                                                                       | String       |
| =trim()=                | Removes whitespace from both ends of a string                                                                                 | String       |
| =valueOf()=             | Returns the string representation of the specified value                                                                      | String       |
|-------------------------+-------------------------------------------------------------------------------------------------------------------------------+--------------|
*** Obtaining substrings
+ =substring(int from, int to); // to not included=
+ =indexOf(char ch); gets index of char in string=
+ =substring(int from) gets string from index till end of str=
-----
*** Converting between Strings and Numbers
+ =Integer.parseInt(String s); converts string to int=
+ =Double.parseDouble(String s); converts str to double=
-----
** Formatting output
use the printf statement
+ =%b= for boolean value
+ =%c= for char value
+ =%d= for integer 
+ =%f= for floating point number 
+ =%e= for std scientific notation
+ =%s= for string 

#+begin_src java
// System.out.printf(format, items);
String greet = "World!";

System.out.printf("Hello, %s", greet);

#+end_src
-----
* Chapter 5: Loops
    + While loop
      #+begin_src java
      // count digits
      int number = 1000;
      int numdup = 1000;
      int count = 0;
      while (numdup > 0) {
            numdup /= 10;
            count++;
      }
      System.out.println(count);
      #+end_src
    + do while: runs the code in the loop before checking for condition.
      #+begin_src java
      int i = 0;
      do
      {
        System.out.println(i);
        i++
      } while (i < 10); // <- semicolon is here only 
      #+end_src
    + for loop
      #+begin_src java
      //   init ;  condition; update
      for (int i = 0; i < 10; i++) {
        System.out.println("i is " + i);
      }
      #+end_src
      #+begin_src java

      for(char ch: "bruh".toCharArray()) {
        System.out.println(ch);
      }
      #+end_src

-----
* Chapter 6: Methods (functions)
contains of
+ type of method (=public static void=)
if the method returns a specific type then =void= should be replaced with the type
+ Method name (any name for usage)
+ Method parameters (between parentheses)
+ Method collection of statements (code in {})
example:
#+begin_src java
public static int addOne(int number) {
    return number + 1;
}
#+end_src
+ parameters are variables in the method
+ variables initialized in the methods are destroyed after the method is executed
-----
* Chapter 7: Arrays
use arrays to store multiple values to a single variable.
declare array with type int
+ =datatype[] arrayName = new datatype[arraySize];=
#+begin_src java
int[] myArray = new int[10]; // initialize an array
myArray[0] = 0;
myArray[1] = 1;
// etc.
// or another way
int[] myArray2 = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
#+end_src
-----
* Chapter 8: Multidimensional Arrays
example
#+begin_src java
int[][] multiArray = new int[10][10];
for (int i = 0; i < multiArray.length; i++) {
    for (int j = 0; j < multiArray[i].length; j++) {
        multiArray[i][j] = 1; // makes every element = 1;
    }
}
// printing an multi dimensional array
for (int i = 0; i < multiArray.length; i++) {
    for (int j = 0; j < multiArray[i].length; j++) {
        System.out.print(multiArray[i][j]);
    }
    System.out.println("");
}
#+end_src

-----
* Chapter 9: Objects and Classes
** Basic info
they help in large-scale software and graphical user interfaces software systems

#+begin_src java
// minimal example
class Circle {
    int radius; // NOTE it is recommended to make it private
}
// running app
class App {
    public static void main(String[] args) {
        Circle circle = new Circle();
        circle.radius = 1;
        System.out.println(circle.radius);
    }
}
#+end_src
-----
** Constructors

+ better way of initializing variables in classes
+ Must have the same name as classes
+ Do not return values not even void
+ Constructor are invoked with new operator
+ Are used for initializing objects
+ =new= operator is used for initializing

#+begin_src java
class Circle {
    int radius;

    // a default Constructor
    // if no values are passed
    public Circle() {
        this.radius = 1;
    }

    // constructor used when one int is passed
    public Circle(int radius) {
        this.radius = radius;
    }
}

class App {
    public static void main(String[] args) {
        // initialize a new class
        // `new` keyword is used
        Circle circle = new Circle(2);
        // ^ Class name
        //       ^^ Class ref var name
        //               ^^ new class of type circle
        // and with `2` as argument
        System.out.println(circle.radius);
    }
}
#+end_src
-----
** Reference data fields
variables in class have default values if not initialized
+ String will have =null=
+ int will be =0=
+ boolean will be =false=
+ char will have ='\u0000'=
#+begin_center
Java assigns no default value to local variables inside a method
#+end_center
-----
** Garbage collection
assign the class to null to tell the Java virtual machine to free the object from memory

-----
** Instance variables and methods
+ instance variable belong to a specific instance
+ instance methods are invoked by an instance of the class

-----
** Static variables, constants, and methods
use =static= modifier to convert the var, const and method to static 
+ Static variables are shared by all the instances of the class.
+ Static methods are not tied to a specific object. 
+ Static constants are final variables shared by all the instances of the class.

-----
** Visiblity Modifiers and Accessor/Mutator Methods
by default the class, variable or method can be accessed by any class in the same package

-----
*** public keyword
+ the class, data or method is accessable to any class or package 
-----
*** private keyword
+ the data or method is only accessable by declaring a variable
+ use get and set Methods to access private data
-----
***  Examples
C1.java
#+name: C1.java
#+begin_src java
package p1;

public class C1 {
    public int x;
    int y;
    private int z; // NOTE: only usable within the class
    // NOTE: private data fields
    // are used to protect data
    // and make code easier to maintain

    public void m1() {
    }

    void m2() {
    }

    private void m3(){
    }
}
#+end_src
C2.java
#+name: C2.java
#+begin_src java
package p1;

public class C2 {
    void aMethod() {
        C1 o = new C1();
        // can access o.x and o.y
        // cannot access o.z
        // can invoke o.m1(); and o.m2();
        // cannot invoke o.m3();
    }
}
#+end_src
C3.java
#+name: C3.java
#+begin_src java
package p2; // notice it is a different package

public class C3 {
    void aMethod() {
        C1 o = new C1();
        // can access o.x only;
        // cannot access o.y and o.z;

        // can invoke o.m1();
        // cannot invoke o.m2() and o.m3()
    }
}
#+end_src
-----
examples for classes

C1.java
#+name: C1.java
#+begin_src java
package p1;

class C1 {
    // whatever
}
#+end_src
C2.java
#+name: C2.java
#+begin_src java
package p1;

public class C2 {
    // can access C1
}
#+end_src
C3.java
#+name: C3.java
#+begin_src java
package p2; // notice the pkg name

public class C3 {
    // cannot access C1
    // can access C2
}
#+end_src
-----
** Immutable objects and classes
to create an immutable class, the data fields must be =private= and provide no mutator and no accessor methods such as getters or setters
-----
** this keyword
=this= is used to refer to class's hidden data fields

example
#+begin_src java
class Bruh {
    private String value;

    public Bruh(String value) {
        this.value = value;
        // this.value is the String variable in the object
        // value from obj = value passed from argument
    }
}
#+end_src
-----

* TODO Chapter 10: objects (review the book)
#+begin_quote
review the book
#+end_quote
-----

* TODO Chapter 11: inheritance and polymorphism
+ =super= keyword is used
  #+begin_quote
  check the book
  #+end_quote
